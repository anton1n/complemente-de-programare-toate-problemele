{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\froman\fcharset0 Times-Roman;\f2\fnil\fcharset0 Menlo-Regular;
\f3\froman\fcharset0 Times-Italic;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa374\partightenfactor0

\f0\b\fs37\fsmilli18720 \cf0 \expnd0\expndtw0\kerning0
13.2 Input and Output Primitives\
\pard\pardeftab720\sa320\partightenfactor0

\f1\b0\fs32 \cf0 This section describes the functions for performing primitive input and output operations on file descriptors: 
\f2\fs26 read
\f1\fs32 , 
\f2\fs26 write
\f1\fs32 , and 
\f2\fs26 lseek
\f1\fs32 . These functions are declared in the header file 
\f2\fs26 unistd.h
\f1\fs32 .\
\pard\pardeftab720\partightenfactor0
\cf0 Data Type: 
\f0\b ssize_t
\f1\b0 \cf2  \'b6\cf0 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 This data type is used to represent the sizes of blocks that can be read or written in a single operation. It is similar to 
\f2\fs26 size_t
\f1\fs32 , but must be a signed type.\
\pard\pardeftab720\partightenfactor0
\cf0 Function: 
\f3\i ssize_t
\f1\i0  
\f0\b read
\f1\b0  
\f3\i (int filedes, void *buffer, size_t size)
\f1\i0 \cf2  \'b6\cf0 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 Preliminary: | MT-Safe | AS-Safe | AC-Safe | See {\field{\*\fldinst{HYPERLINK "https://www.gnu.org/software/libc/manual/html_node/POSIX-Safety-Concepts.html"}}{\fldrslt \cf2 \ul \ulc2 POSIX Safety Concepts}}.\
The 
\f2\fs26 read
\f1\fs32  function reads up to 
\f3\i size
\f1\i0  bytes from the file with descriptor 
\f3\i filedes
\f1\i0 , storing the results in the 
\f3\i buffer
\f1\i0 . (This is not necessarily a character string, and no terminating null character is added.)\
The return value is the number of bytes actually read. This might be less than 
\f3\i size
\f1\i0 ; for example, if there aren\'92t that many bytes left in the file or if there aren\'92t that many bytes immediately available. The exact behavior depends on what kind of file it is. Note that reading less than 
\f3\i size
\f1\i0  bytes is not an error.\
A value of zero indicates end-of-file (except if the value of the 
\f3\i size
\f1\i0  argument is also zero). This is not considered an error. If you keep calling 
\f2\fs26 read
\f1\fs32  while at end-of-file, it will keep returning zero and doing nothing else.\
If 
\f2\fs26 read
\f1\fs32  returns at least one character, there is no way you can tell whether end-of-file was reached. But if you did reach the end, the next read will return zero.\
In case of an error, 
\f2\fs26 read
\f1\fs32  returns 
\f3\i -1
\f1\i0 . The following 
\f2\fs26 errno
\f1\fs32  error conditions are defined for this function:}{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\froman\fcharset0 Times-Roman;\f2\froman\fcharset0 Times-Bold;
\f3\froman\fcharset0 Times-Italic;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 \expnd0\expndtw0\kerning0
EAGAIN
\f1\fs32 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 Normally, when no input is immediately available, 
\f0\fs26 read
\f1\fs32  waits for some input. But if the 
\f0\fs26 O_NONBLOCK
\f1\fs32  flag is set for the file (see {\field{\*\fldinst{HYPERLINK "https://www.gnu.org/software/libc/manual/html_node/File-Status-Flags.html"}}{\fldrslt \cf2 \ul \ulc2 File Status Flags}}), 
\f0\fs26 read
\f1\fs32  returns immediately without reading any data, and reports this error.\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b \cf0 Compatibility Note:
\f1\b0  Most versions of BSD Unix use a different error code for this: 
\f0\fs26 EWOULDBLOCK
\f1\fs32 . In the GNU C Library, 
\f0\fs26 EWOULDBLOCK
\f1\fs32  is an alias for 
\f0\fs26 EAGAIN
\f1\fs32 , so it doesn\'92t matter which name you use.\
On some systems, reading a large amount of data from a character special file can also fail with 
\f0\fs26 EAGAIN
\f1\fs32  if the kernel cannot find enough physical memory to lock down the user\'92s pages. This is limited to devices that transfer with direct memory access into the user\'92s memory, which means it does not include terminals, since they always use separate buffers inside the kernel. This problem never happens on GNU/Hurd systems.\
Any condition that could result in 
\f0\fs26 EAGAIN
\f1\fs32  can instead result in a successful 
\f0\fs26 read
\f1\fs32  which returns fewer bytes than requested. Calling 
\f0\fs26 read
\f1\fs32  again immediately would result in 
\f0\fs26 EAGAIN
\f1\fs32 .\
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 EBADF
\f1\fs32 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 The 
\f3\i filedes
\f1\i0  argument is not a valid file descriptor, or is not open for reading.\
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 EINTR
\f1\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs26 \cf0 read
\f1\fs32  was interrupted by a signal while it was waiting for input. See {\field{\*\fldinst{HYPERLINK "https://www.gnu.org/software/libc/manual/html_node/Interrupted-Primitives.html"}}{\fldrslt \cf2 \ul \ulc2 Primitives Interrupted by Signals}}. A signal will not necessarily cause 
\f0\fs26 read
\f1\fs32  to return 
\f0\fs26 EINTR
\f1\fs32 ; it may instead result in a successful 
\f0\fs26 read
\f1\fs32  which returns fewer bytes than requested.\
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 EIO
\f1\fs32 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 For many devices, and for disk files, this error code indicates a hardware error.\

\f0\fs26 EIO
\f1\fs32  also occurs when a background process tries to read from the controlling terminal, and the normal action of stopping the process by sending it a 
\f0\fs26 SIGTTIN
\f1\fs32  signal isn\'92t working. This might happen if the signal is being blocked or ignored, or because the process group is orphaned. See {\field{\*\fldinst{HYPERLINK "https://www.gnu.org/software/libc/manual/html_node/Job-Control.html"}}{\fldrslt \cf2 \ul \ulc2 Job Control}}, for more information about job control, and {\field{\*\fldinst{HYPERLINK "https://www.gnu.org/software/libc/manual/html_node/Signal-Handling.html"}}{\fldrslt \cf2 \ul \ulc2 Signal Handling}}, for information about signals.\
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 EINVAL
\f1\fs32 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 In some systems, when reading from a character or block device, position and size offsets must be aligned to a particular block size. This error indicates that the offsets were not properly aligned.\
Please note that there is no function named 
\f0\fs26 read64
\f1\fs32 . This is not necessary since this function does not directly modify or handle the possibly wide file offset. Since the kernel handles this state internally, the 
\f0\fs26 read
\f1\fs32  function can be used for all cases.\
This function is a cancellation point in multi-threaded programs. This is a problem if the thread allocates some resources (like memory, file descriptors, semaphores or whatever) at the time 
\f0\fs26 read
\f1\fs32  is called. If the thread gets canceled these resources stay allocated until the program ends. To avoid this, calls to 
\f0\fs26 read
\f1\fs32  should be protected using cancellation handlers.\
The 
\f0\fs26 read
\f1\fs32  function is the underlying primitive for all of the functions that read from streams, such as 
\f0\fs26 fgetc
\f1\fs32 .}{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\froman\fcharset0 Times-Italic;\f2\froman\fcharset0 Times-Bold;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf0 \expnd0\expndtw0\kerning0
Function: 
\f1\i ssize_t
\f0\i0  
\f2\b pread
\f0\b0  
\f1\i (int filedes, void *buffer, size_t size, off_t offset)
\f0\i0 \cf2  \'b6\cf0 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 Preliminary: | MT-Safe | AS-Safe | AC-Safe | See {\field{\*\fldinst{HYPERLINK "https://www.gnu.org/software/libc/manual/html_node/POSIX-Safety-Concepts.html"}}{\fldrslt \cf2 \ul \ulc2 POSIX Safety Concepts}}.\
The 
\f3\fs26 pread
\f0\fs32  function is similar to the 
\f3\fs26 read
\f0\fs32  function. The first three arguments are identical, and the return values and error codes also correspond.\
The difference is the fourth argument and its handling. The data block is not read from the current position of the file descriptor 
\f3\fs26 filedes
\f0\fs32 . Instead the data is read from the file starting at position 
\f1\i offset
\f0\i0 . The position of the file descriptor itself is not affected by the operation. The value is the same as before the call.\
When the source file is compiled with 
\f3\fs26 _FILE_OFFSET_BITS == 64
\f0\fs32  the 
\f3\fs26 pread
\f0\fs32  function is in fact 
\f3\fs26 pread64
\f0\fs32  and the type 
\f3\fs26 off_t
\f0\fs32  has 64 bits, which makes it possible to handle files up to 2^63 bytes in length.\
The return value of 
\f3\fs26 pread
\f0\fs32  describes the number of bytes read. In the error case it returns 
\f1\i -1
\f0\i0  like 
\f3\fs26 read
\f0\fs32  does and the error codes are also the same, with these additions:\
\pard\pardeftab720\partightenfactor0

\f3\fs26 \cf0 EINVAL
\f0\fs32 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 The value given for 
\f1\i offset
\f0\i0  is negative and therefore illegal.\
\pard\pardeftab720\partightenfactor0

\f3\fs26 \cf0 ESPIPE
\f0\fs32 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 The file descriptor 
\f1\i filedes
\f0\i0  is associated with a pipe or a FIFO and this device does not allow positioning of the file pointer.\
The function is an extension defined in the Unix Single Specification version 2.\
\pard\pardeftab720\partightenfactor0
\cf0 Function: 
\f1\i ssize_t
\f0\i0  
\f2\b pread64
\f0\b0  
\f1\i (int filedes, void *buffer, size_t size, off64_t offset)
\f0\i0 \cf2  \'b6\cf0 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 Preliminary: | MT-Safe | AS-Safe | AC-Safe | See {\field{\*\fldinst{HYPERLINK "https://www.gnu.org/software/libc/manual/html_node/POSIX-Safety-Concepts.html"}}{\fldrslt \cf2 \ul \ulc2 POSIX Safety Concepts}}.\
This function is similar to the 
\f3\fs26 pread
\f0\fs32  function. The difference is that the 
\f1\i offset
\f0\i0  parameter is of type 
\f3\fs26 off64_t
\f0\fs32  instead of 
\f3\fs26 off_t
\f0\fs32  which makes it possible on 32 bit machines to address files larger than 2^31 bytes and up to 2^63 bytes. The file descriptor 
\f3\fs26 filedes
\f0\fs32  must be opened using 
\f3\fs26 open64
\f0\fs32  since otherwise the large offsets possible with 
\f3\fs26 off64_t
\f0\fs32  will lead to errors with a descriptor in small file mode.\
When the source file is compiled with 
\f3\fs26 _FILE_OFFSET_BITS == 64
\f0\fs32  on a 32 bit machine this function is actually available under the name 
\f3\fs26 pread
\f0\fs32  and so transparently replaces the 32 bit interface.}{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\froman\fcharset0 Times-Roman;\f2\froman\fcharset0 Times-Bold;
\f3\froman\fcharset0 Times-Italic;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 \expnd0\expndtw0\kerning0
EAGAIN
\f1\fs32 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 Normally, when no input is immediately available, 
\f0\fs26 read
\f1\fs32  waits for some input. But if the 
\f0\fs26 O_NONBLOCK
\f1\fs32  flag is set for the file (see {\field{\*\fldinst{HYPERLINK "https://www.gnu.org/software/libc/manual/html_node/File-Status-Flags.html"}}{\fldrslt \cf2 \ul \ulc2 File Status Flags}}), 
\f0\fs26 read
\f1\fs32  returns immediately without reading any data, and reports this error.\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b \cf0 Compatibility Note:
\f1\b0  Most versions of BSD Unix use a different error code for this: 
\f0\fs26 EWOULDBLOCK
\f1\fs32 . In the GNU C Library, 
\f0\fs26 EWOULDBLOCK
\f1\fs32  is an alias for 
\f0\fs26 EAGAIN
\f1\fs32 , so it doesn\'92t matter which name you use.\
On some systems, reading a large amount of data from a character special file can also fail with 
\f0\fs26 EAGAIN
\f1\fs32  if the kernel cannot find enough physical memory to lock down the user\'92s pages. This is limited to devices that transfer with direct memory access into the user\'92s memory, which means it does not include terminals, since they always use separate buffers inside the kernel. This problem never happens on GNU/Hurd systems.\
Any condition that could result in 
\f0\fs26 EAGAIN
\f1\fs32  can instead result in a successful 
\f0\fs26 read
\f1\fs32  which returns fewer bytes than requested. Calling 
\f0\fs26 read
\f1\fs32  again immediately would result in 
\f0\fs26 EAGAIN
\f1\fs32 .\
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 EBADF
\f1\fs32 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 The 
\f3\i filedes
\f1\i0  argument is not a valid file descriptor, or is not open for reading.\
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 EINTR
\f1\fs32 \
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs26 \cf0 read
\f1\fs32  was interrupted by a signal while it was waiting for input. See {\field{\*\fldinst{HYPERLINK "https://www.gnu.org/software/libc/manual/html_node/Interrupted-Primitives.html"}}{\fldrslt \cf2 \ul \ulc2 Primitives Interrupted by Signals}}. A signal will not necessarily cause 
\f0\fs26 read
\f1\fs32  to return 
\f0\fs26 EINTR
\f1\fs32 ; it may instead result in a successful 
\f0\fs26 read
\f1\fs32  which returns fewer bytes than requested.\
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 EIO
\f1\fs32 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 For many devices, and for disk files, this error code indicates a hardware error.\

\f0\fs26 EIO
\f1\fs32  also occurs when a background process tries to read from the controlling terminal, and the normal action of stopping the process by sending it a 
\f0\fs26 SIGTTIN
\f1\fs32  signal isn\'92t working. This might happen if the signal is being blocked or ignored, or because the process group is orphaned. See {\field{\*\fldinst{HYPERLINK "https://www.gnu.org/software/libc/manual/html_node/Job-Control.html"}}{\fldrslt \cf2 \ul \ulc2 Job Control}}, for more information about job control, and {\field{\*\fldinst{HYPERLINK "https://www.gnu.org/software/libc/manual/html_node/Signal-Handling.html"}}{\fldrslt \cf2 \ul \ulc2 Signal Handling}}, for information about signals.\
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 EINVAL
\f1\fs32 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 In some systems, when reading from a character or block device, position and size offsets must be aligned to a particular block size. This error indicates that the offsets were not properly aligned.\
Please note that there is no function named 
\f0\fs26 read64
\f1\fs32 . This is not necessary since this function does not directly modify or handle the possibly wide file offset. Since the kernel handles this state internally, the 
\f0\fs26 read
\f1\fs32  function can be used for all cases.\
This function is a cancellation point in multi-threaded programs. This is a problem if the thread allocates some resources (like memory, file descriptors, semaphores or whatever) at the time 
\f0\fs26 read
\f1\fs32  is called. If the thread gets canceled these resources stay allocated until the program ends. To avoid this, calls to 
\f0\fs26 read
\f1\fs32  should be protected using cancellation handlers.\
The 
\f0\fs26 read
\f1\fs32  function is the underlying primitive for all of the functions that read from streams, such as 
\f0\fs26 fgetc
\f1\fs32 .}{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\froman\fcharset0 Times-Italic;\f2\froman\fcharset0 Times-Bold;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf0 \expnd0\expndtw0\kerning0
Function: 
\f1\i ssize_t
\f0\i0  
\f2\b pread
\f0\b0  
\f1\i (int filedes, void *buffer, size_t size, off_t offset)
\f0\i0 \cf2  \'b6\cf0 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 Preliminary: | MT-Safe | AS-Safe | AC-Safe | See {\field{\*\fldinst{HYPERLINK "https://www.gnu.org/software/libc/manual/html_node/POSIX-Safety-Concepts.html"}}{\fldrslt \cf2 \ul \ulc2 POSIX Safety Concepts}}.\
The 
\f3\fs26 pread
\f0\fs32  function is similar to the 
\f3\fs26 read
\f0\fs32  function. The first three arguments are identical, and the return values and error codes also correspond.\
The difference is the fourth argument and its handling. The data block is not read from the current position of the file descriptor 
\f3\fs26 filedes
\f0\fs32 . Instead the data is read from the file starting at position 
\f1\i offset
\f0\i0 . The position of the file descriptor itself is not affected by the operation. The value is the same as before the call.\
When the source file is compiled with 
\f3\fs26 _FILE_OFFSET_BITS == 64
\f0\fs32  the 
\f3\fs26 pread
\f0\fs32  function is in fact 
\f3\fs26 pread64
\f0\fs32  and the type 
\f3\fs26 off_t
\f0\fs32  has 64 bits, which makes it possible to handle files up to 2^63 bytes in length.\
The return value of 
\f3\fs26 pread
\f0\fs32  describes the number of bytes read. In the error case it returns 
\f1\i -1
\f0\i0  like 
\f3\fs26 read
\f0\fs32  does and the error codes are also the same, with these additions:\
\pard\pardeftab720\partightenfactor0

\f3\fs26 \cf0 EINVAL
\f0\fs32 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 The value given for 
\f1\i offset
\f0\i0  is negative and therefore illegal.\
\pard\pardeftab720\partightenfactor0

\f3\fs26 \cf0 ESPIPE
\f0\fs32 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 The file descriptor 
\f1\i filedes
\f0\i0  is associated with a pipe or a FIFO and this device does not allow positioning of the file pointer.\
The function is an extension defined in the Unix Single Specification version 2.\
\pard\pardeftab720\partightenfactor0
\cf0 Function: 
\f1\i ssize_t
\f0\i0  
\f2\b pread64
\f0\b0  
\f1\i (int filedes, void *buffer, size_t size, off64_t offset)
\f0\i0 \cf2  \'b6\cf0 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 Preliminary: | MT-Safe | AS-Safe | AC-Safe | See {\field{\*\fldinst{HYPERLINK "https://www.gnu.org/software/libc/manual/html_node/POSIX-Safety-Concepts.html"}}{\fldrslt \cf2 \ul \ulc2 POSIX Safety Concepts}}.\
This function is similar to the 
\f3\fs26 pread
\f0\fs32  function. The difference is that the 
\f1\i offset
\f0\i0  parameter is of type 
\f3\fs26 off64_t
\f0\fs32  instead of 
\f3\fs26 off_t
\f0\fs32  which makes it possible on 32 bit machines to address files larger than 2^31 bytes and up to 2^63 bytes. The file descriptor 
\f3\fs26 filedes
\f0\fs32  must be opened using 
\f3\fs26 open64
\f0\fs32  since otherwise the large offsets possible with 
\f3\fs26 off64_t
\f0\fs32  will lead to errors with a descriptor in small file mode.\
When the source file is compiled with 
\f3\fs26 _FILE_OFFSET_BITS == 64
\f0\fs32  on a 32 bit machine this function is actually available under the name 
\f3\fs26 pread
\f0\fs32  and so transparently replaces the 32 bit interface.}