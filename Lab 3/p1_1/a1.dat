{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\froman\fcharset0 Times-Roman;\f2\fnil\fcharset0 Menlo-Regular;
\f3\froman\fcharset0 Times-Italic;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa374\partightenfactor0

\f0\b\fs37\fsmilli18720 \cf0 \expnd0\expndtw0\kerning0
13.2 Input and Output Primitives\
\pard\pardeftab720\sa320\partightenfactor0

\f1\b0\fs32 \cf0 This section describes the functions for performing primitive input and output operations on file descriptors: 
\f2\fs26 read
\f1\fs32 , 
\f2\fs26 write
\f1\fs32 , and 
\f2\fs26 lseek
\f1\fs32 . These functions are declared in the header file 
\f2\fs26 unistd.h
\f1\fs32 .\
\pard\pardeftab720\partightenfactor0
\cf0 Data Type: 
\f0\b ssize_t
\f1\b0 \cf2  \'b6\cf0 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 This data type is used to represent the sizes of blocks that can be read or written in a single operation. It is similar to 
\f2\fs26 size_t
\f1\fs32 , but must be a signed type.\
\pard\pardeftab720\partightenfactor0
\cf0 Function: 
\f3\i ssize_t
\f1\i0  
\f0\b read
\f1\b0  
\f3\i (int filedes, void *buffer, size_t size)
\f1\i0 \cf2  \'b6\cf0 \
\pard\pardeftab720\sa320\partightenfactor0
\cf0 Preliminary: | MT-Safe | AS-Safe | AC-Safe | See {\field{\*\fldinst{HYPERLINK "https://www.gnu.org/software/libc/manual/html_node/POSIX-Safety-Concepts.html"}}{\fldrslt \cf2 \ul \ulc2 POSIX Safety Concepts}}.\
The 
\f2\fs26 read
\f1\fs32  function reads up to 
\f3\i size
\f1\i0  bytes from the file with descriptor 
\f3\i filedes
\f1\i0 , storing the results in the 
\f3\i buffer
\f1\i0 . (This is not necessarily a character string, and no terminating null character is added.)\
The return value is the number of bytes actually read. This might be less than 
\f3\i size
\f1\i0 ; for example, if there aren\'92t that many bytes left in the file or if there aren\'92t that many bytes immediately available. The exact behavior depends on what kind of file it is. Note that reading less than 
\f3\i size
\f1\i0  bytes is not an error.\
A value of zero indicates end-of-file (except if the value of the 
\f3\i size
\f1\i0  argument is also zero). This is not considered an error. If you keep calling 
\f2\fs26 read
\f1\fs32  while at end-of-file, it will keep returning zero and doing nothing else.\
If 
\f2\fs26 read
\f1\fs32  returns at least one character, there is no way you can tell whether end-of-file was reached. But if you did reach the end, the next read will return zero.\
In case of an error, 
\f2\fs26 read
\f1\fs32  returns 
\f3\i -1
\f1\i0 . The following 
\f2\fs26 errno
\f1\fs32  error conditions are defined for this function:}